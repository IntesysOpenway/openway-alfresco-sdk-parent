<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>it.iopenway</groupId>
	<artifactId>openway-alfresco-sdk-parent</artifactId>
	<version>5.1.6.10-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>OpenWay Alfresco SDK parent</name>
	<description>Base di sviluppo per un progetto Openway Alfresco basato su Alfresco Maven SDK</description>

	<organization>
		<name>Intesys Openway Srl</name>
		<url>http://www.iopenway.it/</url>
	</organization>

	<properties>

		<!-- Alfresco Maven Plugin version to use -->
		<alfresco.sdk.version>3.0.0</alfresco.sdk.version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Properties used in dependency declarations, you don't need to change these -->
		<alfresco.groupId>org.alfresco</alfresco.groupId>

		<alfresco.platform.version>5.1.g</alfresco.platform.version>
		<alfresco.share.version>5.1.f</alfresco.share.version>

		<!-- Default is to run with a Community edition, change to 'enterprise' if using Enterprise edition -->
		<maven.alfresco.edition>community</maven.alfresco.edition>

		<!-- JRebel Hot reloading of classpath stuff and web resource stuff -->
		<jrebel.version>1.1.6</jrebel.version>

		<!-- Compile with Java 7, default is 5 -->
		<maven.compiler.source>1.7</maven.compiler.source>
		<maven.compiler.target>1.7</maven.compiler.target>

	</properties>

	<scm>
		<!-- URL to GIT folder that contains this pom -->
		<developerConnection>scm:git:git@gitlab.intesys.it:openway/openway-alfresco-sdk-parent.git</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<distributionManagement>
		<snapshotRepository>
			<id>iopenway</id>
			<url>http://172.28.13.245:8080/nexus/content/repositories/snapshots/</url>
		</snapshotRepository>
		<repository>
			<id>iopenway</id>
			<url>http://172.28.13.245:8080/nexus/content/repositories/releases/</url>
		</repository>
	</distributionManagement>

	<build>
		<pluginManagement>
			<plugins>
				<!-- Build an AMP if 3rd party libs are needed by the extensions JARs are the default artifact produced in your modules, if you want to build an amp for each 
					module you have to enable this plugin and inspect the src/main/assembly.xml file if you want to customize the layout of your AMP. The end result is that Maven will 
					produce both a JAR file and an AMP with your module. -->
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.6</version>
					<executions>
						<execution>
							<id>build-amp-file</id>
							<phase>package</phase>
							<goals>
								<goal>single</goal>
							</goals>
							<configuration>
								<appendAssemblyId>false</appendAssemblyId>
								<descriptor>src/main/assembly/amp.xml</descriptor>
							</configuration>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>org.alfresco.maven.plugin</groupId>
							<artifactId>alfresco-maven-plugin</artifactId>
							<version>${alfresco.sdk.version}</version>
						</dependency>
					</dependencies>
				</plugin>

				<!-- Hot reloading with JRebel -->
				<plugin>
					<groupId>org.zeroturnaround</groupId>
					<artifactId>jrebel-maven-plugin</artifactId>
					<version>${jrebel.version}</version>
					<executions>
						<execution>
							<id>generate-rebel-xml</id>
							<phase>process-resources</phase>
							<goals>
								<goal>generate</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<!-- For more information about how to configure JRebel plugin see: http://manuals.zeroturnaround.com/jrebel/standalone/maven.html#maven-rebel-xml -->
						<classpath>
							<fallback>all</fallback>
							<resources>
								<resource></resource>
							</resources>
						</classpath>

						<!-- alwaysGenerate - default is false If 'false' - rebel.xml is generated if timestamps of pom.xml and the current rebel.xml file are not equal. If 'true' 
							- rebel.xml will always be generated -->
						<alwaysGenerate>true</alwaysGenerate>
					</configuration>
				</plugin>

				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.0.1</version>
					<configuration>
						<encoding>UTF-8</encoding>
						<nonFilteredFileExtensions> <!-- jpg, jpeg, gif, bmp and png are added automatically -->
							<nonFilteredFileExtension>ftl</nonFilteredFileExtension>
							<nonFilteredFileExtension>acp</nonFilteredFileExtension>
							<nonFilteredFileExtension>svg</nonFilteredFileExtension>
							<nonFilteredFileExtension>pdf</nonFilteredFileExtension>
							<nonFilteredFileExtension>doc</nonFilteredFileExtension>
							<nonFilteredFileExtension>docx</nonFilteredFileExtension>
							<nonFilteredFileExtension>xls</nonFilteredFileExtension>
							<nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
							<nonFilteredFileExtension>ppt</nonFilteredFileExtension>
							<nonFilteredFileExtension>pptx</nonFilteredFileExtension>
							<nonFilteredFileExtension>bin</nonFilteredFileExtension>
							<nonFilteredFileExtension>lic</nonFilteredFileExtension>
							<nonFilteredFileExtension>swf</nonFilteredFileExtension>
							<nonFilteredFileExtension>zip</nonFilteredFileExtension>
							<nonFilteredFileExtension>msg</nonFilteredFileExtension>
							<nonFilteredFileExtension>jar</nonFilteredFileExtension>
							<nonFilteredFileExtension>ttf</nonFilteredFileExtension>
							<nonFilteredFileExtension>eot</nonFilteredFileExtension>
							<nonFilteredFileExtension>woff</nonFilteredFileExtension>
							<nonFilteredFileExtension>woff2</nonFilteredFileExtension>
							<nonFilteredFileExtension>css</nonFilteredFileExtension>
							<nonFilteredFileExtension>ico</nonFilteredFileExtension>
							<nonFilteredFileExtension>psd</nonFilteredFileExtension>
							<nonFilteredFileExtension>js</nonFilteredFileExtension>
							<nonFilteredFileExtension>jsfdia</nonFilteredFileExtension>
							<nonFilteredFileExtension>jasper</nonFilteredFileExtension>
							<nonFilteredFileExtension>ks</nonFilteredFileExtension>
						</nonFilteredFileExtensions>
					</configuration>
				</plugin>


				<!-- Runs the integration tests, any class that follows naming convention "**/IT*.java", "**/*IT.java", and "**/*ITCase.java" will be considered an integration 
					test -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-failsafe-plugin</artifactId>
					<version>2.19.1</version>
					<executions>
						<execution>
							<id>integration-test</id>
							<phase>integration-test</phase>
							<goals>
								<goal>integration-test</goal>
							</goals>
						</execution>
						<execution>
							<id>verify-test</id>
							<phase>verify</phase>
							<goals>
								<goal>verify</goal>
							</goals>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>org.apache.maven.surefire</groupId>
							<artifactId>surefire-junit47</artifactId>
							<version>2.19.1</version>
						</dependency>
					</dependencies>
				</plugin>
			</plugins>
		</pluginManagement>
	</build>

	<profiles>
		<!-- Profilo attivato ogni volta che la property obfuscate=true. I sorgenti vengono offuscati con proguard. -->
		<profile>
			<id>iopenway-obfuscate-profile</id>
			<activation>
				<property>
					<name>obfuscate</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<!-- In caso di offuscamento faccio pescare le classi compilate nella cartella dove sono gia' state offuscate. -->
						<plugin>
							<groupId>org.alfresco.maven.plugin</groupId>
							<artifactId>alfresco-maven-plugin</artifactId>
							<extensions>true</extensions>
							<configuration combine.children="append">
								<classesDirectory>${project.build.directory}/classes-ob</classesDirectory>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<plugin>
						<groupId>com.github.wvengen</groupId>
						<artifactId>proguard-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>compile</phase>
								<goals>
									<goal>proguard</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<options combine.children="append">
								<option>-injar ${project.build.directory}/classes/</option>
								<option>-outjar ${project.build.directory}/classes-ob/</option>
								<option>-renamesourcefileattribute SourceFile</option>
								<option>-keepparameternames</option>
								<option>-keepattributes
									Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,
									*Annotation*,EnclosingMethod,!LocalVariableTable,!LocalVariableTypeTable</option>
								<option>-keep public class * { public protected *;}</option>
								<!-- Preserve all getter and setter -->
								<option>-keep class * {
									void set*(***);
									void set*(int, ***);
									boolean is*();
									boolean is*(int);
									*** get*();
									*** get*(int);
									}</option>
								<!-- <option><![CDATA[-keep public class * { public protected *;}]]></option> -->
								<!-- Utile per javaDoc -->
								<option>-keepclassmembernames
									class * {
									java.lang.Class
									class$(java.lang.String);
									java.lang.Class
									class$(java.lang.String, boolean);}</option>
								<!-- Enumerazioni -->
								<option>-keepclassmembers
									enum * {
									public static **[] values();
									public static **
									valueOf(java.lang.String);}</option>
								<!-- Serializzazioni -->
								<option>-keepclassmembers
									class * implements java.io.Serializable
									{
									static final long serialVersionUID;
									private static final
									java.io.ObjectStreamField[]
									serialPersistentFields;
									private void
									writeObject(java.io.ObjectOutputStream);
									private void
									readObject(java.io.ObjectInputStream);
									java.lang.Object
									writeReplace();
									java.lang.Object readResolve();}</option>
							</options>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<modules>
		<module>openway-alfresco-sdk-platform</module>
		<module>openway-alfresco-sdk-share</module>
	</modules>
</project>