<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

	<modelVersion>4.0.0</modelVersion>

	<groupId>it.iopenway</groupId>
	<artifactId>openway-alfresco-sdk-parent</artifactId>
	<version>6.2.0.5</version>
	<packaging>pom</packaging>

	<name>OpenWay Alfresco SDK parent</name>
	<description>Base di sviluppo per un progetto Openway Alfresco basato su Alfresco Maven SDK</description>

	<organization>
		<name>Intesys Openway Srl</name>
		<url>http://www.iopenway.it/</url>
	</organization>

	<properties>

		<!-- Alfresco Maven Plugin version to use -->
		<alfresco.sdk.version>4.1.0</alfresco.sdk.version>

		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

		<!-- Properties used in dependency declarations, you don't need to change these -->
		<alfresco.groupId>org.alfresco</alfresco.groupId>
		<alfresco.bomDependencyArtifactId>acs-community-packaging</alfresco.bomDependencyArtifactId>
		<alfresco.platform.version>6.2.0-ga</alfresco.platform.version>
		<alfresco.share.version>6.2.0</alfresco.share.version>

		<!-- Docker images -->
		<docker.acs.image>docker.iopenway.it/iopenway/alfresco-content-repository-community</docker.acs.image>
		<docker.share.image>alfresco/alfresco-share</docker.share.image>

		<!-- JRebel Hot reloading of classpath stuff and web resource stuff -->
		<jrebel.version>1.1.8</jrebel.version>
		<!-- Environment configuration properties -->
		<share.port>8180</share.port>
		<share.debug.port>9898</share.debug.port>
		 <!-- TODO <acs.host>openway-archetype-acs</acs.host> -->
		<acs.port>8080</acs.port>
		<acs.debug.port>8888</acs.debug.port>
		<postgres.port>5555</postgres.port>
		<!-- This parameter is only required for those cases in which ACS is not exposed in http://localhost:8080/alfresco (i.e. Windows Docker) -->
		<test.acs.endpoint.path />

		<!-- Plugins Version -->
		<proguard-plugin.version>2.3.1</proguard-plugin.version>
		<maven-scm-plugin.version>1.11.2</maven-scm-plugin.version>
		<release-plugin.version>3.0.0-M1</release-plugin.version>
		<jgitflow-maven-plugin.version>1.0-m5.1</jgitflow-maven-plugin.version>
		<mybatis-generator-maven-plugin.version>1.4.0</mybatis-generator-maven-plugin.version>
		<license-maven-plugin.version>1.12</license-maven-plugin.version>
		<maven-javadoc-plugin.version>3.0.0</maven-javadoc-plugin.version>

		<obfuscate>true</obfuscate>
	</properties>

	<scm>
		<!-- URL to GIT folder that contains this pom -->
		<developerConnection>scm:git:git@github.com:IntesysOpenway/openway-alfresco-sdk-parent.git</developerConnection>
		<tag>HEAD</tag>
	</scm>

	<distributionManagement>
		<snapshotRepository>
			<id>iopenway</id>
			<url>https://maven.iopenway.it/repository/snapshots/</url>
		</snapshotRepository>
		<repository>
			<id>iopenway</id>
			<url>https://maven.iopenway.it/repository/releases/</url>
		</repository>
	</distributionManagement>

	<build>
		<pluginManagement>
			<plugins>

				<!-- Filter the test resource files in the AIO parent project, and do property substitutions. We need this config so this is done before the Alfresco Maven Plugin 
					'run' is executed. -->
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-resources-plugin</artifactId>
					<version>3.1.0</version>
					<configuration>
						<encoding>UTF-8</encoding>
						<nonFilteredFileExtensions> <!-- jpg, jpeg, gif, bmp and png are added automatically -->
							<nonFilteredFileExtension>ftl</nonFilteredFileExtension>
							<nonFilteredFileExtension>acp</nonFilteredFileExtension>
							<nonFilteredFileExtension>svg</nonFilteredFileExtension>
							<nonFilteredFileExtension>pdf</nonFilteredFileExtension>
							<nonFilteredFileExtension>doc</nonFilteredFileExtension>
							<nonFilteredFileExtension>docx</nonFilteredFileExtension>
							<nonFilteredFileExtension>xls</nonFilteredFileExtension>
							<nonFilteredFileExtension>xlsx</nonFilteredFileExtension>
							<nonFilteredFileExtension>ppt</nonFilteredFileExtension>
							<nonFilteredFileExtension>pptx</nonFilteredFileExtension>
							<nonFilteredFileExtension>bin</nonFilteredFileExtension>
							<nonFilteredFileExtension>lic</nonFilteredFileExtension>
							<nonFilteredFileExtension>swf</nonFilteredFileExtension>
							<nonFilteredFileExtension>zip</nonFilteredFileExtension>
							<nonFilteredFileExtension>msg</nonFilteredFileExtension>
							<nonFilteredFileExtension>jar</nonFilteredFileExtension>
							<nonFilteredFileExtension>ttf</nonFilteredFileExtension>
							<nonFilteredFileExtension>eot</nonFilteredFileExtension>
							<nonFilteredFileExtension>woff</nonFilteredFileExtension>
							<nonFilteredFileExtension>woff2</nonFilteredFileExtension>
							<nonFilteredFileExtension>css</nonFilteredFileExtension>
							<nonFilteredFileExtension>ico</nonFilteredFileExtension>
							<nonFilteredFileExtension>psd</nonFilteredFileExtension>
							<nonFilteredFileExtension>js</nonFilteredFileExtension>
							<nonFilteredFileExtension>jsfdia</nonFilteredFileExtension>
							<nonFilteredFileExtension>jasper</nonFilteredFileExtension>
							<nonFilteredFileExtension>ks</nonFilteredFileExtension>
						</nonFilteredFileExtensions>
					</configuration>
				</plugin>

				<!-- Compress JavaScript files and store as *-min.js -->
				<plugin>
					<groupId>net.alchim31.maven</groupId>
					<artifactId>yuicompressor-maven-plugin</artifactId>
					<version>1.5.1</version>
					<executions>
						<!-- Compress the JS files under the assembly folder -->
						<execution>
							<id>compress-assembly</id>
							<goals>
								<goal>compress</goal>
							</goals>
							<configuration>
								<sourceDirectory>${project.basedir}/src/main/assembly/web</sourceDirectory>
								<outputDirectory>${project.basedir}/src/main/assembly/web</outputDirectory>
								<excludes>
									<exclude>**/webscripts/**</exclude>
									<exclude>**/site-webscripts/**</exclude>
									<exclude>**/META-INF/**</exclude>
									<exclude>**/*.lib.js</exclude>
									<exclude>**/*.css</exclude>
									<exclude>**/*-min.js</exclude>
									<exclude>**/*-min.css</exclude>
								</excludes>
								<force>true</force>
								<jswarn>false</jswarn>
							</configuration>
						</execution>
						<!-- Compress the JS files under the resources folder -->
						<execution>
							<id>compress-resources</id>
							<goals>
								<goal>compress</goal>
							</goals>
							<configuration>
								<excludes>
									<exclude>**/webscripts/**</exclude>
									<exclude>**/site-webscripts/**</exclude>
									<exclude>**/*.lib.js</exclude>
									<exclude>**/*.css</exclude>
									<exclude>**/*-min.js</exclude>
									<exclude>**/*-min.css</exclude>
								</excludes>
								<force>true</force>
								<jswarn>false</jswarn>
							</configuration>
						</execution>
					</executions>
				</plugin>

				<!-- Hot reloading with JRebel -->
				<plugin>
					<groupId>org.zeroturnaround</groupId>
					<artifactId>jrebel-maven-plugin</artifactId>
					<version>${jrebel.version}</version>
					<executions>
						<execution>
							<id>generate-rebel-xml</id>
							<phase>process-resources</phase>
							<goals>
								<goal>generate</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<!-- For more information about how to configure JRebel plugin see: http://manuals.zeroturnaround.com/jrebel/standalone/maven.html#maven-rebel-xml -->
						<classpath>
							<fallback>all</fallback>
							<resources>
								<resource>
									<directory>${project.build.outputDirectory}</directory>
									<directory>${project.build.testOutputDirectory}</directory>
								</resource>
							</resources>
						</classpath>
	
						<!-- alwaysGenerate - default is false If 'false' - rebel.xml is generated if timestamps of pom.xml and the current rebel.xml file are not equal. If 'true' 
							- rebel.xml will always be generated -->
						<alwaysGenerate>true</alwaysGenerate>
					</configuration>
				</plugin>

				<plugin>
					<groupId>com.github.wvengen</groupId>
					<artifactId>proguard-maven-plugin</artifactId>
					<version>${proguard-plugin.version}</version>
					<configuration>
						<obfuscate>true</obfuscate>
						<options>
							<option>-ignorewarnings</option>
							<option>-dontoptimize</option>
							<option>-keepdirectories</option>
						</options>
						<addMavenDescriptor>false</addMavenDescriptor>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-release-plugin</artifactId>
					<version>${release-plugin.version}</version>
					<configuration>
						<tagBase>${scm-project-tag.url}</tagBase>
						<!-- Offuscamento attivo e controlli javadoc alleggeriti -->
						<arguments>-Dobfuscate=${obfuscate} -Dadditionalparam=-Xdoclint:none</arguments>
					</configuration>
				</plugin>
				<plugin>
					<groupId>external.atlassian.jgitflow</groupId>
					<artifactId>jgitflow-maven-plugin</artifactId>
					<version>${jgitflow-maven-plugin.version}</version>
					<configuration>
						<flowInitContext>
							<masterBranchName>master</masterBranchName>
							<developBranchName>develop</developBranchName>
							<featureBranchPrefix>feature/</featureBranchPrefix>
							<releaseBranchPrefix>release/</releaseBranchPrefix>
							<hotfixBranchPrefix>hotfix/</hotfixBranchPrefix>
						</flowInitContext>
						<!-- Offuscamento attivo e controlli javadoc alleggeriti -->
						<arguments>-Dobfuscate=true -Dadditionalparam=-Xdoclint:none</arguments>
						<enableSshAgent>true</enableSshAgent>
					</configuration>
					<dependencies>
						<!-- Risolve un problema con GitHub su alcuni algoritmi di -->
						<!-- crittografia deprecati (https://ecosystem.atlassian.net/browse/MJF-299?oldIssueView=true) -->
						<dependency>
							<groupId>com.jcraft</groupId>
							<artifactId>jsch</artifactId>
							<version>0.1.54</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-scm-plugin</artifactId>
					<version>${maven-scm-plugin.version}</version>
					<configuration>
						<connectionType>developerConnection</connectionType>
					</configuration>
				</plugin>
				<plugin>
					<groupId>org.mybatis.generator</groupId>
					<artifactId>mybatis-generator-maven-plugin</artifactId>
					<version>${mybatis-generator-maven-plugin.version}</version>
					<executions>
						<execution>
							<id>Generate MyBatis Artifacts</id>
							<goals>
								<goal>generate</goal>
							</goals>
						</execution>
					</executions>
					<dependencies>
						<dependency>
							<groupId>org.postgresql</groupId>
							<artifactId>postgresql</artifactId>
							<version>${postgresql.version}</version>
						</dependency>
					</dependencies>
				</plugin>
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>${license-maven-plugin.version}</version>
					<configuration>
						<!-- <licenseName>lgpl_v3</licenseName> -> ogni progetto deve dichiarare la sua licenza (esistono dei template predefiniti) -->
						<processStartTag>==============================LICENSE=============================</processStartTag>
						<processEndTag>============================LICENSE-END===========================</processEndTag>
						<excludes>
							<exclude>**/webscripts/**.config.xml</exclude>
							<exclude>**/site-webscripts/**.config.xml</exclude>
							<exclude>**/webscripts/**.js</exclude>
							<exclude>**/site-webscripts/**.js</exclude>
						</excludes>
					</configuration>
					<executions>
						<execution>
							<id>first</id>
							<goals>
								<goal>update-file-header</goal>
							</goals>
							<phase>process-sources</phase>
						</execution>
					</executions>
				</plugin>
				<plugin>
					<groupId>org.apache.maven.plugins</groupId>
					<artifactId>maven-javadoc-plugin</artifactId>
					<version>${maven-javadoc-plugin.version}</version>
					<configuration>
						<doclint>none</doclint>
					</configuration>
				</plugin>
			</plugins>
		</pluginManagement>

		<resources>
			<!-- Filter the resource files in this project and do property substitutions -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
			</resource>
		</resources>
		<testResources>
			<!-- Filter the test resource files in this project and do property substitutions -->
			<testResource>
				<directory>src/test/resources</directory>
				<filtering>true</filtering>
			</testResource>
		</testResources>
	</build>

	<profiles>
		<profile>
			<id>java8</id>
			<activation>
				<jdk>[1.8,11.0)</jdk>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.8.0</version>
						<configuration>
							<source>1.8</source>
							<target>1.8</target>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>java11</id>
			<activation>
				<jdk>[11.0,)</jdk>
			</activation>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.8.0</version>
						<configuration>
							<release>11</release>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		
		<!-- Profilo attivato ogni volta che la property obfuscate=true. I sorgenti vengono offuscati con proguard. -->
		<profile>
			<id>iopenway-obfuscate-profile</id>
			<activation>
				<property>
					<name>obfuscate</name>
					<value>true</value>
				</property>
			</activation>
			<build>
				<pluginManagement>
					<plugins>
						<!-- In caso di offuscamento faccio pescare le classi compilate nella cartella dove sono gia' state offuscate. -->
						<plugin>
							<artifactId>maven-jar-plugin</artifactId>
							<extensions>true</extensions>
							<configuration combine.children="append">
								<classesDirectory>${project.build.directory}/classes-ob</classesDirectory>
							</configuration>
						</plugin>
					</plugins>
				</pluginManagement>
				<plugins>
					<plugin>
						<groupId>com.github.wvengen</groupId>
						<artifactId>proguard-maven-plugin</artifactId>
						<executions>
							<execution>
								<phase>compile</phase>
								<goals>
									<goal>proguard</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<injar>/classes/</injar>
							<injarNotExistsSkip>true</injarNotExistsSkip>
							<outjar>/classes-ob/</outjar>
							<putLibraryJarsInTempDir>true</putLibraryJarsInTempDir>
							<options combine.children="append">
								<!-- per far funzionare Java 11 -->
								<option>-libraryjars ${java.home}/jmods/java.base.jmod(!**.jar;!module-info.class)</option>
								
								<option>-renamesourcefileattribute SourceFile</option>
								<option>-keepparameternames</option>
								<option>-keepattributes
									Exceptions,InnerClasses,Signature,Deprecated,SourceFile,LineNumberTable,
									*Annotation*,EnclosingMethod,!LocalVariableTable,!LocalVariableTypeTable</option>
								<option>-keep public class * { public protected *;}</option>
								<!-- Preserve all getter and setter -->
								<option>-keep class * {
									void set*(***);
									void set*(int, ***);
									boolean is*();
									boolean is*(int);
									*** get*();
									*** get*(int);
									}</option>
								<!-- <option><![CDATA[-keep public class * { public protected *;}]]></option> -->
								<!-- Utile per javaDoc -->
								<option>-keepclassmembernames
									class * {
									java.lang.Class
									class$(java.lang.String);
									java.lang.Class
									class$(java.lang.String, boolean);}</option>
								<!-- Enumerazioni -->
								<option>-keepclassmembers
									enum * {
									public static **[] values();
									public static **
									valueOf(java.lang.String);}</option>
								<!-- Serializzazioni -->
								<option>-keepclassmembers
									class * implements java.io.Serializable
									{
									static final long serialVersionUID;
									private static final
									java.io.ObjectStreamField[]
									serialPersistentFields;
									private void
									writeObject(java.io.ObjectOutputStream);
									private void
									readObject(java.io.ObjectInputStream);
									java.lang.Object
									writeReplace();
									java.lang.Object readResolve();}</option>
							</options>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<modules>
		<module>openway-alfresco-sdk-platform</module>
		<module>openway-alfresco-sdk-share</module>
	</modules>
</project>
